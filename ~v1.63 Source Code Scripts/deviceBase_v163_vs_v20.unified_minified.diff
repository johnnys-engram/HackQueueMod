--- deviceBase_v1.63.script +++ deviceBase_v2.0.script @@ -1,6 +1,244 @@ +enum EGlitchState +{ +	NONE = 0, +	DEFAULT = 1, +	SUBLIMINAL_MESSAGE = 2, +} + +struct GlitchData +{ +	var intensity : Float; +	var state : EGlitchState; +} + +class AdvanceInteractionStateResolveEvent extends Event +{ +	var m_toggle : Bool; +} + +class ForceUIRefreshEvent extends Event +{ +	var m_ownerID : EntityID; + +	public constexpr function GetFriendlyDescription() : String +	{ +		return "Force UI Refresh"; +	} + +} + +class DelayedUIRefreshEvent extends Event +{ +} + +class DelayedUpdateDeviceStateEvent extends Event +{ +} + +class SetUICameraZoomEvent extends Event +{ +	var hasUICameraZoom : Bool; +} + +class ToggleUIInteractivity extends Event +{ +	editable var m_isInteractive : Bool; + +	public constexpr export function GetFriendlyDescription() : String +	{ +		return "Toggle UI Interactivity"; +	} + +} + +class DisableRPGRequirementsForDeviceActions extends Event +{ +	[ customEditor = "TweakDBGroupInheritance;ObjectAction" ] +	editable var m_action : TweakDBID; +	editable var m_disable : Bool; +	default m_disable = true; + +	public constexpr function GetFriendlyDescription() : String +	{ +		return "Disable RPG Requirements For Device Actions"; +	} + +} + +class RepeatPersonalLinkAnimFeaturesHACK extends Event +{ +	var activator : weak< GameObject >; +} + +import class AccessPointMiniGameStatus extends Event +{ +	import var minigameState : HackingMinigameState; +} + +import class gameDevicePSChanged extends Event +{ +} + +import class gameDeviceVisibilityChangedEvent extends Event +{ +	import var isVisible : Uint32; +} + +class EMPHitEvent extends Event +{ +	var lifetime : Float; +	default lifetime = 15.0f; +} + +class NotifyParentsEvent extends Event +{ +} + +class NotifyHighlightedDevice extends Event +{ +	var IsDeviceHighlighted : Bool; +	var IsNotifiedByMasterDevice : Bool; +} + +import class SetAsQuestImportantEvent extends Event +{ +	public import function GetFriendlyDescription() : String; +	public import function IsImportant() : Bool; +	public import function SetImportant( important : Bool ); +	public import function PropagateToSlaves() : Bool; +} + +class RevealNetworkGridOnPulse extends Event +{ +	var duration : Float; +	default duration = 1.0f; +	var revealSlave : Bool; +	var revealMaster : Bool; +} + +class RevealNetworkGridNetworkRequest extends Event +{ +} + +operator==( action1 : DeviceAction, action2 : DeviceAction ) : Bool +{ +	if( action1.GetCurrentDisplayString() == action2.GetCurrentDisplayString() ) +	{ +		if( action1.GetPersistentID() == action2.GetPersistentID() ) +		{ +			return true; +		} +	} +	return false; +} + +operator==( action1 : PuppetAction, action2 : PuppetAction ) : Bool +{ +	if( action1.GetCurrentDisplayString() == action2.GetCurrentDisplayString() ) +	{ +		if( action1.GetPersistentID() == action2.GetPersistentID() ) +		{ +			return true; +		} +	} +	return false; +} + +enum EDeviceStatus +{ +	DISABLED = -2, +	UNPOWERED = -1, +	OFF = 0, +	ON = 1, +	INVALID = 2, +} + +enum EDeviceDurabilityType +{ +	INVULNERABLE = 0, +	INDESTRUCTIBLE = 1, +	DESTRUCTIBLE = 2, +} + +enum EDeviceDurabilityState +{ +	NOMINAL = 0, +	MALFUNCTIONING = 1, +	BROKEN = 2, +	DESTROYED = 3, +} + +enum EGameplayChallengeLevel +{ +	NONE = 0, +	TRIVIAL = 1, +	EASY = 2, +	MEDIUM = 3, +	HARD = 4, +	IMPOSSIBLE = 5, +} + +enum EActivationState +{ +	NONE = 0, +	ACTIVATED = 1, +	DEACTIVATED = 2, +} + +enum EPersonalLinkSlotSide +{ +	FRONT = 0, +	RIGHT = 1, +	BOTTOM = 2, +} + +class SendSpiderbotToPerformActionEvent extends Event +{ +	var executor : weak< GameObject >; +} + +class AddForceHighlightTargetEvent extends Event +{ +	var targetID : EntityID; +	var effecName : CName; +} + +class AreaEffectVisualisationRequest extends Event +{ +	var areaEffectID : CName; +	var show : Bool; +} + +class RevealDeviceRequest extends Event +{ +	var shouldReveal : Bool; +	var sourceID : EntityID; +	var linkData : SNetworkLinkData; +} + +class CancelDeviceUpdateEvent extends Event +{ +} + +class DeviceUpdateEvent extends TickableEvent +{ +} + +class UpdateWillingInvestigators extends Event +{ +	var investigator : EntityID; +} + +class SetInvestigationPositionsArrayEvent extends Event +{ +	var investigationPositionsArray : array< Vector4 >; +} + +importonly class DeviceReplicatedState extends IScriptable +{ +} + import class DeviceBase extends GameObject { -	protected import var isLogicReady : Bool; - protected import virtual function GetServerState() : DeviceReplicatedState; protected import const virtual function GetClientState() : const DeviceReplicatedState; @@ -32,4 +270,21 @@ } + +	protected import var isLogicReady : Bool; +} + +struct BaseDeviceData +{ +	var m_deviceState : EDeviceStatus; +	var m_durabilityType : EDeviceDurabilityType; +	var m_deviceName : String; +	var m_debugName : CName; +	var m_hackOwner : weak< GameObject >; +} + +struct BaseResaveData +{ +	var m_baseDeviceData : BaseDeviceData; +	var m_tweakDBRecord : TweakDBID; } @@ -46,4 +301,5 @@ protected var m_isUIdirty : Bool; default m_isUIdirty = true; +	private var m_onInputHintManagerInitializedChangedCallback : CallbackHandle; protected var m_personalLinkComponent : WorkspotResourceComponent; protected var m_durabilityType : EDeviceDurabilityType; @@ -80,4 +336,5 @@ protected var m_personalLinkFailsafeID : DelayID; protected var m_wasAnimationFastForwarded : Bool; +	private var m_wasEngineeringSkillcheckTriggered : Bool; [ category = "RPG" ][ customEditor = "TweakDBGroupInheritance;DeviceContentAssignment" ] protected instanceeditable var m_contentScale : TweakDBID; @@ -89,5 +346,5 @@ mutable var m_areaEffectsInFocusMode : array< SAreaEffectTargetData >; protected instanceeditable var m_debugOptions : DebuggerProperties; -	protected var m_workspotActivator : weak< GameObject >; +	var m_currentlyUploadingAction : weak< ScriptableDeviceAction >; protected function DetermineInteractionStateByTask( optional context : GetActionsContext ) @@ -306,4 +563,6 @@ { var ps : ScriptableDeviceComponentPS; +		var mod : gameConstantStatModifierData; +		var statsSystem : StatsSystem; super.OnGameAttached(); ps = GetDevicePS(); @@ -316,4 +575,11 @@ { ps.SetHasPersonalLinkSlot( true ); +		} +		if( ps.WasQuickHacked() ) +		{ +			GameInstance.GetStatusEffectSystem( GetGame() ).ApplyStatusEffect( GetEntityID(), T"BaseStatusEffect.WasQuickHacked" ); +			statsSystem = GameInstance.GetStatsSystem( GetGame() ); +			mod = ( ( gameConstantStatModifierData )( RPGManager.CreateStatModifier( gamedataStatType.WasQuickHacked, gameStatModifierType.Additive, 1.0 ) ) ); +			statsSystem.AddModifier( GetEntityID(), mod ); } } @@ -461,4 +727,36 @@ { GetDevicePS().ForceDisableDevice(); +		ClearQuickHacks(); +	} + +	protected function Die() +	{ +		var deathEvent : gameDeathEvent; +		deathEvent = new gameDeathEvent; +		QueueEvent( deathEvent ); +	} + +	private const function IsActionQueueEnabled() : Bool +	{ +		var playerPuppet : PlayerPuppet; +		var disallowDeviceQhQueue : Bool; +		playerPuppet = GetPlayer( GetGame() ); +		disallowDeviceQhQueue = TDB.GetBool( T"NewPerks.Intelligence_Left_Milestone_2.disallowDeviceQhQueue" ); +		return !( disallowDeviceQhQueue ) && QuickHackableQueueHelper.IsActionQueueEnabled( m_currentlyUploadingAction, playerPuppet ); +	} + +	private const function IsActionQueueFull() : Bool +	{ +		return QuickHackableQueueHelper.IsActionQueueFull( m_currentlyUploadingAction ); +	} + +	public override function SetCurrentlyUploadingAction( action : ScriptableDeviceAction ) +	{ +		m_currentlyUploadingAction = action; +	} + +	public override function GetCurrentlyUploadingAction() : ScriptableDeviceAction +	{ +		return m_currentlyUploadingAction; } @@ -468,5 +766,5 @@ } -	protected const function ExecuteAction( choice : InteractionChoice, executor : weak< GameObject >, layerTag : CName ) +	protected const function ExecuteAction( const choice : ref< InteractionChoice >, executor : weak< GameObject >, layerTag : CName ) { var action : DeviceAction; @@ -503,5 +801,5 @@ sAction.SetExecutor( executor ); } -			sAction.ProcessRPGAction( GetGame() ); +			sAction.ProcessRPGAction( GetGame(), m_gameplayRoleComponent ); return true; } @@ -588,5 +886,5 @@ break; default: -				Log( "RestoreDeviceState / Unsupported EDeviceState - DEBUG" ); +			; } ExecuteDeviceStateOperation(); @@ -819,5 +1117,5 @@ public const override function IsQuickHackAble() : Bool { -		if( !( GetDevicePS().HasPlaystyle( EPlaystyle.NETRUNNER ) ) || IsPrevention() ) +		if( !( GetDevicePS().HasPlaystyle( EPlaystyle.NETRUNNER ) ) ) { return false; @@ -1259,52 +1557,47 @@ } -	protected virtual function ShowAdvanceInteractionInputHints() -	{ -		var data : InputHintData; -		data.action = 'click'; -		data.source = 'AdvanceInteractionMode'; -		data.localizedLabel = "LocKey#49383"; -		data.sortingPriority = 4; -		SendGameplayInputHintEvent( true, data ); -		data.action = 'UI_FakeCursor'; -		data.source = 'AdvanceInteractionMode'; -		data.localizedLabel = "LocKey#49377"; -		data.sortingPriority = 3; -		data.action = 'UI_MoveCursorVertically'; -		data.source = 'AdvanceInteractionMode'; -		data.localizedLabel = "LocKey#49380"; -		data.sortingPriority = 2; -		data.action = 'right_stick_y'; -		data.source = 'AdvanceInteractionMode'; -		data.localizedLabel = "LocKey#49382"; -		data.sortingPriority = 1; -		SendGameplayInputHintEvent( true, data ); -		data.action = 'UI_Exit'; -		data.source = 'AdvanceInteractionMode'; -		data.localizedLabel = "LocKey#49376"; -		data.sortingPriority = 0; -		SendGameplayInputHintEvent( true, data ); -	} - -	protected virtual function HideAdvanceInteractionInputHints() -	{ -		SendRemoveGameplayInputHintsBySourceEvent( 'AdvanceInteractionMode' ); -	} - -	protected function SendGameplayInputHintEvent( show : Bool, data : InputHintData ) -	{ -		var evt : UpdateInputHintEvent; -		evt = new UpdateInputHintEvent; -		evt.data = data; -		evt.show = show; -		evt.targetHintContainer = 'GameplayInputHelper'; -		GameInstance.GetUISystem( GetGame() ).QueueEvent( evt ); -	} - -	private function SendRemoveGameplayInputHintsBySourceEvent( sourceName : CName ) +	private function ShowAdvanceInteractionInputHints() +	{ +		m_onInputHintManagerInitializedChangedCallback = GameInstance.GetBlackboardSystem( GetGame() ).Get( GetAllBlackboardDefs().InputSchemes ).RegisterListenerVariant( GetAllBlackboardDefs().InputSchemes.InitializedInputHintManagerList, this, 'OnInputHintManagerInitializedChanged', true ); +	} + +	protected event OnInputHintManagerInitializedChanged( value : Variant ) +	{ +		var currentInitializedInputHintManagerList : array< CName >; +		var evt : UpdateInputHintMultipleEvent; +		var inputData : InputHintData; +		var i : Int32; +		currentInitializedInputHintManagerList = ( ( array< CName > )value ); +		for( i = 0; i < currentInitializedInputHintManagerList.Size(); i += 1 ) +		{ +			if( currentInitializedInputHintManagerList[ i ] == 'GameplayInputHelper' ) +			{ +				evt = new UpdateInputHintMultipleEvent; +				evt.targetHintContainer = 'GameplayInputHelper'; +				inputData.source = 'AdvanceInteractionMode'; +				inputData.action = 'click'; +				inputData.localizedLabel = "LocKey#49383"; +				evt.AddInputHint( inputData, true ); +				inputData.action = 'right_stick_y'; +				inputData.localizedLabel = "LocKey#49382"; +				evt.AddInputHint( inputData, true ); +				inputData.action = 'UI_Exit'; +				inputData.localizedLabel = "LocKey#49376"; +				evt.AddInputHint( inputData, true ); +				GameInstance.GetUISystem( GetGame() ).QueueEvent( evt ); +				return true; +			} +		} +	} + +	private function HideAdvanceInteractionInputHints() { var evt : DeleteInputHintBySourceEvent; +		if( m_onInputHintManagerInitializedChangedCallback ) +		{ +			GameInstance.GetBlackboardSystem( GetGame() ).Get( GetAllBlackboardDefs().InputSchemes ).UnregisterListenerVariant( GetAllBlackboardDefs().InputSchemes.InitializedInputHintManagerList, m_onInputHintManagerInitializedChangedCallback ); +		} evt = new DeleteInputHintBySourceEvent; -		evt.source = sourceName; +		evt.source = 'AdvanceInteractionMode'; evt.targetHintContainer = 'GameplayInputHelper'; GameInstance.GetUISystem( GetGame() ).QueueEvent( evt ); @@ -1541,5 +1834,5 @@ { GetBlackboard().SetBool( GetBlackboardDef().UI_InteractivityBlocked, !( evt.m_isInteractive ) ); -		GetDevicePS().ToggleInteractivity( evt.m_isInteractive ); +		GetDevicePS().SetInteractionState( evt.m_isInteractive ); } @@ -1583,4 +1876,5 @@ protected function SetZoomBlackboardValues( newState : Bool, optional lockPlayerFor : Float ) { +		var invalidID : EntityID; var playerStateMachineBlackboard : IBlackboard; var playerObject : GameObject; @@ -1596,7 +1890,7 @@ playerObject = GameInstance.GetPlayerSystem( GetGame() ).GetLocalPlayerControlledGameObject(); playerStateMachineBlackboard = GameInstance.GetBlackboardSystem( GetGame() ).GetLocalInstanced( playerObject.GetEntityID(), GetAllBlackboardDefs().PlayerStateMachine ); -			playerStateMachineBlackboard = GameInstance.GetBlackboardSystem( GetGame() ).GetLocalInstanced( playerObject.GetEntityID(), GetAllBlackboardDefs().PlayerStateMachine ); playerStateMachineBlackboard.SetBool( GetAllBlackboardDefs().PlayerStateMachine.IsInteractingWithDevice, newState ); playerStateMachineBlackboard.SetBool( GetAllBlackboardDefs().PlayerStateMachine.IsUIZoomDevice, newState ); +			playerStateMachineBlackboard.SetEntityID( GetAllBlackboardDefs().PlayerStateMachine.UIZoomDeviceID, ( ( newState ) ? ( GetEntityID() ) : ( invalidID ) ) ); playerStateMachineBlackboard.FireCallbacks(); } @@ -1614,4 +1908,7 @@ SetZoomBlackboardValues( evt.m_toggle, 0.0 ); } + + +	protected var m_workspotActivator : weak< GameObject >; protected virtual function EnterWorkspot( activator : GameObject, optional freeCamera : Bool, optional componentName : CName, optional deviceData : CName ) @@ -2011,7 +2308,10 @@ var evt : entAppearanceEvent; evt = new entAppearanceEvent; -		evt.appearanceName = appearance; -		evt.componentName = component; -		QueueEvent( evt ); +		if( IsNameValid( appearance ) ) +		{ +			evt.appearanceName = appearance; +			evt.componentName = component; +			QueueEvent( evt ); +		} } @@ -2094,5 +2394,5 @@ protected virtual function SetStateArmed() {} -	public const function GetActionsDebug( context : GetActionsContext, debugger : DeviceDebuggerComponent, out outActions : array< DeviceAction > ) : Bool +	public const function GetActionsDebug( const context : ref< GetActionsContext >, debugger : DeviceDebuggerComponent, out outActions : array< DeviceAction > ) : Bool { if( !( debugger ) ) @@ -2197,189 +2497,18 @@ quickSlotsManagerNotification = new RevealInteractionWheel; quickSlotsManagerNotification.lookAtObject = this; -		quickSlotsManagerNotification.shouldReveal = shouldOpen; if( shouldOpen ) { context = GetDevicePS().GenerateContext( gamedeviceRequestType.Remote, GetInteractionClearance(), GetPlayerMainObject(), GetEntityID() ); GetDevicePS().GetRemoteActions( actions, context ); -			if( m_isQhackUploadInProgerss ) +			if( ( m_isQhackUploadInProgerss && !( IsActionQueueEnabled() ) ) || IsActionQueueFull() ) { ScriptableDeviceComponentPS.SetActionsInactiveAll( actions, "LocKey#7020" ); } -			TranslateActionsIntoQuickSlotCommands( actions, commands ); +			QuickHackableHelper.TranslateActionsIntoQuickSlotCommands( actions, commands, this, GetDevicePS() ); quickSlotsManagerNotification.commands = commands; -		} -		HUDManager.SetQHDescriptionVisibility( GetGame(), shouldOpen ); +			quickSlotsManagerNotification.shouldReveal = actions.Size() > 0; +		} +		HUDManager.SetQHDescriptionVisibility( GetGame(), actions.Size() > 0 ); GameInstance.GetUISystem( GetGame() ).QueueEvent( quickSlotsManagerNotification ); -	} - -	private function TranslateActionsIntoQuickSlotCommands( actions : array< DeviceAction >, out commands : array< QuickhackData > ) -	{ -		var i, i1 : Int32; -		var newCommand : QuickhackData; -		var sAction : ScriptableDeviceAction; -		var choice : InteractionChoice; -		var actionRecord : weak< ObjectAction_Record >; -		var actionStartEffects : array< weak< ObjectActionEffect_Record > >; -		var statModifiers : array< weak< StatModifier_Record > >; -		var emptyChoice : InteractionChoice; -		var actionCompletionEffects : array< weak< ObjectActionEffect_Record > >; -		var playerRef : PlayerPuppet; -		var playerQHacksList : array< PlayerQuickhackData >; -		var actionMatchDeck : Bool; -		var iceLVL : Float; -		var actionOwnerName : CName; -		playerRef = GetPlayer( GetGame() ); -		iceLVL = GetICELevel(); -		actionOwnerName = StringToName( GetDisplayName() ); -		playerQHacksList = RPGManager.GetPlayerQuickHackListWithQuality( playerRef ); -		if( playerQHacksList.Size() == 0 ) -		{ -			newCommand = new QuickhackData; -			newCommand.m_title = "LocKey#42171"; -			newCommand.m_isLocked = true; -			newCommand.m_actionState = EActionInactivityReson.Invalid; -			newCommand.m_actionOwnerName = StringToName( GetDisplayName() ); -			newCommand.m_description = "LocKey#42172"; -			commands.PushBack( newCommand ); -		} -		else -		{ -			for( i = 0; i < playerQHacksList.Size(); i += 1 ) -			{ -				newCommand = new QuickhackData; -				sAction = NULL; -				actionStartEffects.Clear(); -				actionRecord = playerQHacksList[ i ].actionRecord; -				if( actionRecord.ObjectActionType().Type() != gamedataObjectActionType.DeviceQuickHack ) -				{ -					continue; -				} -				actionMatchDeck = false; -				for( i1 = 0; i1 < actions.Size(); i1 += 1 ) -				{ -					sAction = ( ( ScriptableDeviceAction )( actions[ i1 ] ) ); -					if( actionRecord.ActionName() == sAction.GetObjectActionRecord().ActionName() ) -					{ -						actionMatchDeck = true; -						if( actionRecord.Priority() >= sAction.GetObjectActionRecord().Priority() ) -						{ -							sAction.SetObjectActionID( playerQHacksList[ i ].actionRecord.GetID() ); -						} -						else -						{ -							actionRecord = sAction.GetObjectActionRecord(); -						} -						newCommand.m_uploadTime = sAction.GetActivationTime(); -						newCommand.m_duration = GetDevicePS().GetDistractionDuration( sAction ); -						break; -					} -				} -				newCommand.m_actionOwnerName = actionOwnerName; -				newCommand.m_title = LocKeyToString( actionRecord.ObjectActionUI().Caption() ); -				newCommand.m_description = LocKeyToString( actionRecord.ObjectActionUI().Description() ); -				newCommand.m_icon = actionRecord.ObjectActionUI().CaptionIcon().TexturePartID().GetID(); -				newCommand.m_iconCategory = actionRecord.GameplayCategory().IconName(); -				newCommand.m_type = actionRecord.ObjectActionType().Type(); -				newCommand.m_actionOwner = GetEntityID(); -				newCommand.m_isInstant = false; -				newCommand.m_ICELevel = iceLVL; -				newCommand.m_ICELevelVisible = false; -				newCommand.m_vulnerabilities = GetDevicePS().GetActiveQuickHackVulnerabilities(); -				newCommand.m_actionState = EActionInactivityReson.Locked; -				newCommand.m_quality = playerQHacksList[ i ].quality; -				newCommand.m_costRaw = BaseScriptableAction.GetBaseCostStatic( playerRef, actionRecord ); -				newCommand.m_category = actionRecord.HackCategory(); -				actionCompletionEffects.Clear(); -				actionRecord.CompletionEffects( actionCompletionEffects ); -				newCommand.m_actionCompletionEffects = actionCompletionEffects; -				actionRecord.StartEffects( actionStartEffects ); -				for( i1 = 0; i1 < actionStartEffects.Size(); i1 += 1 ) -				{ -					if( actionStartEffects[ i1 ].StatusEffect().StatusEffectType().Type() == gamedataStatusEffectType.PlayerCooldown ) -					{ -						actionStartEffects[ i1 ].StatusEffect().Duration().StatModifiers( statModifiers ); -						newCommand.m_cooldown = RPGManager.CalculateStatModifiers( statModifiers, GetGame(), playerRef, playerRef.GetEntityID(), playerRef.GetEntityID() ); -						newCommand.m_cooldownTweak = actionStartEffects[ i1 ].StatusEffect().GetID(); -						statModifiers.Clear(); -					} -					if( newCommand.m_cooldown != 0.0 ) -					{ -						break; -					} -				} -				if( actionMatchDeck ) -				{ -					if( !( ( ( GenericDevice )( this ) ) ) ) -					{ -						choice = emptyChoice; -						choice = sAction.GetInteractionChoice(); -						if( TDBID.IsValid( choice.choiceMetaData.tweakDBID ) ) -						{ -							newCommand.m_titleAlternative = LocKeyToString( TweakDBInterface.GetInteractionBaseRecord( choice.choiceMetaData.tweakDBID ).Caption() ); -						} -					} -					newCommand.m_cost = sAction.GetCost(); -					if( sAction.IsInactive() ) -					{ -						newCommand.m_isLocked = true; -						newCommand.m_inactiveReason = sAction.GetInactiveReason(); -						if( HasActiveQuickHackUpload() ) -						{ -							newCommand.m_action = sAction; -						} -					} -					else -					{ -						if( !( sAction.CanPayCost() ) ) -						{ -							newCommand.m_actionState = EActionInactivityReson.OutOfMemory; -							newCommand.m_isLocked = true; -							newCommand.m_inactiveReason = "LocKey#27398"; -						} -						if( GameInstance.GetStatPoolsSystem( GetGame() ).HasActiveStatPool( GetEntityID(), gamedataStatPoolType.QuickHackUpload ) ) -						{ -							newCommand.m_isLocked = true; -							newCommand.m_inactiveReason = "LocKey#27398"; -						} -						if( !( sAction.IsInactive() ) || HasActiveQuickHackUpload() ) -						{ -							newCommand.m_action = sAction; -						} -					} -				} -				else -				{ -					newCommand.m_isLocked = true; -					newCommand.m_inactiveReason = "LocKey#10943"; -				} -				newCommand.m_actionMatchesTarget = actionMatchDeck; -				if( !( newCommand.m_isLocked ) ) -				{ -					newCommand.m_actionState = EActionInactivityReson.Ready; -				} -				commands.PushBack( newCommand ); -			} -		} -		for( i = 0; i < commands.Size(); i += 1 ) -		{ -			if( commands[ i ].m_isLocked && commands[ i ].m_action ) -			{ -				( ( ScriptableDeviceAction )( commands[ i ].m_action ) ).SetInactiveWithReason( false, commands[ i ].m_inactiveReason ); -			} -		} -		QuickhackModule.SortCommandPriority( commands, GetGame() ); -	} - -	private const function GetICELevel() : Float -	{ -		var playerLevel : Float; -		var targetLevel : Float; -		var resistance : Float; -		var statsSystem : StatsSystem; -		statsSystem = GameInstance.GetStatsSystem( GetGame() ); -		playerLevel = statsSystem.GetStatValue( GetPlayer( GetGame() ).GetEntityID(), gamedataStatType.Level ); -		targetLevel = statsSystem.GetStatValue( GetEntityID(), gamedataStatType.PowerLevel ); -		resistance = statsSystem.GetStatValue( GetEntityID(), gamedataStatType.HackingResistance ); -		return resistance + ( 0.5 * ( targetLevel - playerLevel ) ); } @@ -2429,5 +2558,5 @@ } -	private function GetMatchingActionProgramName( actions : array< DeviceAction >, searchWord : String ) : Int32 +	private function GetMatchingActionProgramName( const actions : ref< array< DeviceAction > >, const searchWord : ref< String > ) : Int32 { var actionRecord : weak< ObjectAction_Record >; @@ -2467,4 +2596,5 @@ protected event OnUploadProgressStateChanged( evt : UploadProgramProgressEvent ) { +		var quickSlotCommandUsed : QuickSlotCommandUsed; if( evt.progressBarContext == EProgressBarContext.QuickHack ) { @@ -2478,4 +2608,13 @@ { m_isQhackUploadInProgerss = false; +					quickSlotCommandUsed = QuickHackableQueueHelper.PopFromQuickHackQueue( evt, m_gameplayRoleComponent ); +					if( quickSlotCommandUsed && !( IsDead() ) ) +					{ +						OnQuickSlotCommandUsed( quickSlotCommandUsed ); +					} +					else if( m_currentlyUploadingAction ) +					{ +						m_currentlyUploadingAction.m_isInactive = true; +					} } } @@ -2491,5 +2630,4 @@ GameInstance.GetStatsSystem( GetGame() ).RemoveAllModifiers( GetEntityID(), gamedataStatType.QuickHackDuration, true ); statMod = RPGManager.CreateStatModifier( gamedataStatType.QuickHackDuration, gameStatModifierType.Additive, 1.0 ); -		GameInstance.GetStatsSystem( GetGame() ).RemoveAllModifiers( GetEntityID(), gamedataStatType.QuickHackDuration ); GameInstance.GetStatsSystem( GetGame() ).AddModifier( GetEntityID(), statMod ); actionDurationListener = new QuickHackDurationListener; @@ -2935,6 +3073,6 @@ if( quickHackIndex >= 0 ) { -				effectData = GetFxResourceMapper().GetAreaEffectDataByIndex( quickHackIndex ); -				effectData.stimLifetime = action.GetDurationValue(); +				effectData = new AreaEffectData; +				effectData.CopyData( GetFxResourceMapper().GetAreaEffectDataByIndex( quickHackIndex ) ); TriggerArreaEffectDistraction( effectData ); } @@ -2961,17 +3099,22 @@ public const function GetAreaEffectLifetimeByAction( action : ScriptableDeviceAction ) : Float { -		var quickHackIndex : Int32; var effectData : AreaEffectData; -		var lifetime : Float; -		if( GetFxResourceMapper() ) -		{ -			quickHackIndex = GetFxResourceMapper().GetAreaEffectDataIndexByAction( action ); -			if( quickHackIndex >= 0 ) -			{ -				effectData = GetFxResourceMapper().GetAreaEffectDataByIndex( quickHackIndex ); -				lifetime = effectData.stimLifetime; -			} -		} -		return lifetime; +		var result : Float; +		result = 0.0; +		if( GetFxResourceMapper() && GetFxResourceMapper().TryGetAreaEffectByAction( action, effectData ) ) +		{ +			result = effectData.stimLifetime; +		} +		else +		{ +			result = action.GetDurationTime(); +		} +		return result; +	} + +	public const function GetAreaEffectStimRangeByAction( action : ScriptableDeviceAction ) : Float +	{ +		var effectData : AreaEffectData; +		return ( ( GetFxResourceMapper() && GetFxResourceMapper().TryGetAreaEffectByAction( action, effectData ) ) ? ( effectData.stimRange ) : ( 0.0 ) ); } @@ -3077,5 +3220,5 @@ } -	public const function GetNodePosition( optional nodeRef : NodeRef ) : array< Vector4 > +	public function GetNodePosition( optional nodeRef : NodeRef ) : array< Vector4 > { var globalRef : GlobalNodeRef; @@ -3091,10 +3234,9 @@ var pointResults : NavigationFindPointResult; var sourcePos : Vector4; -		var setPositionsEvt : SetInvestigationPositionsArrayEvent; -		if( HasInvestigationPositionsArrayCached() ) -		{ -			return GetCachedInvestigationPositionsArray(); -		} globalRef = ResolveNodeRefWithEntityID( nodeRef, GetEntityID() ); +		if( HasInvestigationPositionsArrayCached( globalRef ) ) +		{ +			return GetCachedInvestigationPositionsArray( globalRef ); +		} if( GlobalNodeRef.IsDefined( globalRef ) ) { @@ -3103,5 +3245,6 @@ if( !( Vector4.IsZero( position ) ) ) { -				pointResults = GameInstance.GetNavigationSystem( GetGame() ).FindPointInSphereOnlyHumanNavmesh( position, 0.5, NavGenAgentSize.Human, false ); +				pointResults.point = GameInstance.GetNavigationSystem( GetGame() ).GetNearestNavmeshPointBelowOnlyHumanNavmesh( position, 1.0, 5 ); +				pointResults.status = ( ( !( Vector4.IsZero( pointResults.point ) ) ) ? ( worldNavigationRequestStatus.OK ) : ( worldNavigationRequestStatus.OtherError ) ); } else @@ -3160,17 +3303,10 @@ if( positionsArray.Size() > 0 ) { -			setPositionsEvt = new SetInvestigationPositionsArrayEvent; -			setPositionsEvt.investigationPositionsArray = positionsArray; -			GameInstance.GetPersistencySystem( GetGame() ).QueueEntityEvent( GetEntityID(), setPositionsEvt ); +			SetInvestigationPositionsArray( globalRef, positionsArray ); } return positionsArray; } -	protected event OnSetInvestigationPositionsArray( evt : SetInvestigationPositionsArrayEvent ) -	{ -		SetInvestigationPositionsArray( evt.investigationPositionsArray ); -	} - -	protected const virtual function GetCachedInvestigationPositionsArray() : array< Vector4 > +	protected const virtual function GetCachedInvestigationPositionsArray( globalNodeRef : GlobalNodeRef ) : array< Vector4 > { var arr : array< Vector4 >; @@ -3178,7 +3314,7 @@ } -	protected virtual function SetInvestigationPositionsArray( arr : array< Vector4 > ) {} - -	protected const virtual function HasInvestigationPositionsArrayCached() : Bool +	protected virtual function SetInvestigationPositionsArray( globalNodeRef : GlobalNodeRef, const arr : ref< array< Vector4 > > ) {} + +	protected const virtual function HasInvestigationPositionsArrayCached( globalNodeRef : GlobalNodeRef ) : Bool { return false; @@ -3468,5 +3604,4 @@ if( !( IsFinal() ) ) { -			LogDevices( this + "PingNetworkGrid_Event" ); } GameInstance.GetPersistencySystem( GetGame() ).QueuePSEvent( GetDevicePS().GetID(), GetDevicePS().GetClassName(), evt ); @@ -3529,5 +3664,5 @@ private function ShouldBeHighlightedLongerOnPing() : Bool { -		return IsQuickHackAble() && CanScanThroughWalls(); +		return IsQuickHackAble() && CanPlayerScanThroughWalls(); } @@ -3581,5 +3716,4 @@ if( !( IsFinal() ) ) { -			LogDevices( this + "OnRevealDeviceRequest" ); } } @@ -3716,5 +3850,5 @@ } -	private function ResolveComponents( componentsData : array< SComponentOperationData > ) +	private function ResolveComponents( const componentsData : ref< array< SComponentOperationData > > ) { var i : Int32; @@ -3777,5 +3911,5 @@ } -	protected function AddHudButtonHelper( argText : String, argIcon : CName ) +	protected function AddHudButtonHelper( const argText : ref< String >, argIcon : CName ) { GameInstance.GetBlackboardSystem( GetGame() ).Get( GetAllBlackboardDefs().UI_HudButtonHelp ).SetString( GetAllBlackboardDefs().UI_HudButtonHelp.button1_Text, argText ); @@ -4031,8 +4165,9 @@ return m_contentScale; } -		else +		else if( TDBID.IsValid( GetDevicePS().GetContentAssignmentID() ) ) { return GetDevicePS().GetContentAssignmentID(); } +		return T"DeviceContentAssignment.Autoscaling"; } @@ -4076,5 +4211,5 @@ } -	public const override function DeterminGameplayRoleMappinVisuaState( data : SDeviceMappinData ) : EMappinVisualState +	public const override function DeterminGameplayRoleMappinVisuaState( const data : ref< SDeviceMappinData > ) : EMappinVisualState { var hasQuickHacksExposed : Bool; @@ -4123,5 +4258,5 @@ } -	public const override function DeterminGameplayRoleMappinRange( data : SDeviceMappinData ) : Float +	public const override function DeterminGameplayRoleMappinRange( const data : ref< SDeviceMappinData > ) : Float { var range : Float; @@ -4166,4 +4301,31 @@ } +	protected function ClearQuickHacks() +	{ +		var quickHackClear : DeactivateQuickHackIndicatorEvent; +		quickHackClear = new DeactivateQuickHackIndicatorEvent; +		QueueEvent( quickHackClear ); +		QuickHackableQueueHelper.RemoveQuickhackQueue( m_gameplayRoleComponent, m_currentlyUploadingAction ); +	} + +	protected event OnSetDeviceAttitude( evt : SetDeviceAttitude ) +	{ +		if( !( evt.IsCompleted() ) && evt.Repeat ) +		{ +			evt.Repeat = false; +			evt.Attitude = EAIAttitude.AIA_Neutral; +			ShowQuickHackDuration( evt ); +		} +	} + +	protected event OnQuickHackToggleOn( evt : QuickHackToggleON ) +	{ +		if( ( !( evt.IsCompleted() ) && evt.Repeat ) && ( evt.GetDurationTime() > 0.0 ) ) +		{ +			evt.Repeat = false; +			ShowQuickHackDuration( evt ); +		} +	} + protected event OnQuickHackDistraction( evt : QuickHackDistraction ) { @@ -4602,5 +4764,4 @@ if( evt.IsQuickhack ) { -			ExecuteAction( GetDevicePS().ActionSetDeviceAttitude() ); } ToggleForcedVisibilityInAnimSystem( 'TCSTakeOverControlActivate', true, 0.0 ); @@ -4617,4 +4778,5 @@ var targetingSystem : TargetingSystem; var blackboard : IBlackboard; +		var cam : FPPCameraComponent; targetingSystem = GameInstance.GetTargetingSystem( GetGame() ); blackboard = GameInstance.GetBlackboardSystem( GetGame() ).GetLocalInstanced( GameInstance.GetPlayerSystem( GetGame() ).GetLocalPlayerControlledGameObject().GetEntityID(), GetAllBlackboardDefs().PlayerStateMachine ); @@ -4638,10 +4800,20 @@ targetingSystem.AddIgnoredLookAtEntity( GetPlayer( GetGame() ), GetEntityID() ); m_cameraComponent.Activate( 0.0, true ); -		} +			cam = ( ( FPPCameraComponent )( m_cameraComponent ) ); +			if( cam ) +			{ +				cam.ResetPitch(); +			} +		} +	} + +	protected virtual function HandlePlayerStateMachineZoom( value : Float ) +	{ +		m_cameraComponent.SetZoom( value ); } protected event OnPlayerStateMachineZoom( value : Float ) { -		m_cameraComponent.SetZoom( value ); +		HandlePlayerStateMachineZoom( value ); } @@ -4832,5 +5004,5 @@ } -	protected function EvaluateProximityRevealInteractionLayerState() +	protected virtual function EvaluateProximityRevealInteractionLayerState() { if( IsActiveBackdoor() ) @@ -4874,180 +5046,27 @@ } -} - -importonly class DeviceReplicatedState extends IScriptable -{ -} - -struct GlitchData -{ -	var intensity : Float; -	var state : EGlitchState; -} - -class AdvanceInteractionStateResolveEvent extends Event -{ -	var m_toggle : Bool; -} - -class ForceUIRefreshEvent extends Event -{ -	var m_ownerID : EntityID; - -	public constexpr function GetFriendlyDescription() : String -	{ -		return "Force UI Refresh"; -	} - -} - -class DelayedUIRefreshEvent extends Event -{ -} - -class DelayedUpdateDeviceStateEvent extends Event -{ -} - -class SetUICameraZoomEvent extends Event -{ -	var hasUICameraZoom : Bool; -} - -class ToggleUIInteractivity extends Event -{ -	editable var m_isInteractive : Bool; - -	public constexpr export function GetFriendlyDescription() : String -	{ -		return "Toggle UI Interactivity"; -	} - -} - -class DisableRPGRequirementsForDeviceActions extends Event -{ -	[ customEditor = "TweakDBGroupInheritance;ObjectAction" ] -	editable var m_action : TweakDBID; -	editable var m_disable : Bool; -	default m_disable = true; - -	public constexpr function GetFriendlyDescription() : String -	{ -		return "Disable RPG Requirements For Device Actions"; -	} - -} - -class RepeatPersonalLinkAnimFeaturesHACK extends Event -{ -	var activator : weak< GameObject >; -} - -import class AccessPointMiniGameStatus extends Event -{ -	import var minigameState : HackingMinigameState; -} - -import class gameDevicePSChanged extends Event -{ -} - -import class gameDeviceVisibilityChangedEvent extends Event -{ -	import var isVisible : Uint32; -} - -class EMPHitEvent extends Event -{ -	var lifetime : Float; -	default lifetime = 15.0f; -} - -class NotifyParentsEvent extends Event -{ -} - -class NotifyHighlightedDevice extends Event -{ -	var IsDeviceHighlighted : Bool; -	var IsNotifiedByMasterDevice : Bool; -} - -import class SetAsQuestImportantEvent extends Event -{ -	public import function GetFriendlyDescription() : String; -	public import function IsImportant() : Bool; -	public import function SetImportant( important : Bool ); -	public import function PropagateToSlaves() : Bool; -} - -class RevealNetworkGridOnPulse extends Event -{ -	var duration : Float; -	default duration = 1.0f; -	var revealSlave : Bool; -	var revealMaster : Bool; -} - -class RevealNetworkGridNetworkRequest extends Event -{ -} - -class SendSpiderbotToPerformActionEvent extends Event -{ -	var executor : weak< GameObject >; -} - -class AddForceHighlightTargetEvent extends Event -{ -	var targetID : EntityID; -	var effecName : CName; -} - -class AreaEffectVisualisationRequest extends Event -{ -	var areaEffectID : CName; -	var show : Bool; -} - -class RevealDeviceRequest extends Event -{ -	var shouldReveal : Bool; -	var sourceID : EntityID; -	var linkData : SNetworkLinkData; -} - -class CancelDeviceUpdateEvent extends Event -{ -} - -class DeviceUpdateEvent extends TickableEvent -{ -} - -class UpdateWillingInvestigators extends Event -{ -	var investigator : EntityID; -} - -class SetInvestigationPositionsArrayEvent extends Event -{ -	var investigationPositionsArray : array< Vector4 >; -} - -struct BaseDeviceData -{ -	var m_deviceState : EDeviceStatus; -	var m_durabilityType : EDeviceDurabilityType; -	var m_deviceName : String; -	var m_debugName : CName; -	var m_hackOwner : weak< GameObject >; -} - -struct BaseResaveData -{ -	var m_baseDeviceData : BaseDeviceData; -	var m_tweakDBRecord : TweakDBID; +	protected function CreateFxInstance( resource : FxResource, transform : WorldTransform ) : FxInstance +	{ +		var fx : FxInstance; +		var fxSystem : FxSystem; +		fxSystem = GameInstance.GetFxSystem( GetGame() ); +		fx = fxSystem.SpawnEffect( resource, transform ); +		return fx; +	} + +	protected event OnHandleEngineeringSkillcheckSFX( evt : ActionEngineering ) +	{ +		if( !( m_wasEngineeringSkillcheckTriggered ) ) +		{ +			PlaySoundEvent( this, GetEngineeringSkillcheckSFXName() ); +			m_wasEngineeringSkillcheckTriggered = true; +		} +	} + +	private constexpr function GetEngineeringSkillcheckSFXName() : CName +	{ +		return 'ui_jingle_technical_ability_skillcheck'; +	} + } @@ -5061,81 +5080,2 @@ } -enum EGlitchState -{ -	NONE = 0, -	DEFAULT = 1, -	SUBLIMINAL_MESSAGE = 2, -} - -enum EDeviceStatus -{ -	DISABLED = -2, -	UNPOWERED = -1, -	OFF = 0, -	ON = 1, -	INVALID = 2, -} - -enum EDeviceDurabilityType -{ -	INVULNERABLE = 0, -	INDESTRUCTIBLE = 1, -	DESTRUCTIBLE = 2, -} - -enum EDeviceDurabilityState -{ -	NOMINAL = 0, -	MALFUNCTIONING = 1, -	BROKEN = 2, -	DESTROYED = 3, -} - -enum EGameplayChallengeLevel -{ -	NONE = 0, -	TRIVIAL = 1, -	EASY = 2, -	MEDIUM = 3, -	HARD = 4, -	IMPOSSIBLE = 5, -} - -enum EActivationState -{ -	NONE = 0, -	ACTIVATED = 1, -	DEACTIVATED = 2, -} - -enum EPersonalLinkSlotSide -{ -	FRONT = 0, -	RIGHT = 1, -	BOTTOM = 2, -} - -operator==( action1 : DeviceAction, action2 : DeviceAction ) : Bool -{ -	if( action1.GetCurrentDisplayString() == action2.GetCurrentDisplayString() ) -	{ -		if( action1.GetPersistentID() == action2.GetPersistentID() ) -		{ -			return true; -		} -	} -	return false; -} - -operator==( action1 : PuppetAction, action2 : PuppetAction ) : Bool -{ -	if( action1.GetCurrentDisplayString() == action2.GetCurrentDisplayString() ) -	{ -		if( action1.GetPersistentID() == action2.GetPersistentID() ) -		{ -			return true; -		} -	} -	return false; -} -